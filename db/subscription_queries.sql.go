// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: subscription_queries.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addSub = `-- name: AddSub :one
INSERT INTO subscriptions(
    service_name,
    price,
    user_id,
    started_at
)VALUES(
    $1,
    $2,
    $3,
    $4
) RETURNING id
`

type AddSubParams struct {
	ServiceName string
	Price       int32
	UserID      uuid.UUID
	StartedAt   time.Time
}

func (q *Queries) AddSub(ctx context.Context, arg AddSubParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, addSub,
		arg.ServiceName,
		arg.Price,
		arg.UserID,
		arg.StartedAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getSubs = `-- name: GetSubs :many
SELECT
    id, service_name, price, user_id, started_at, created_at, updated_at
FROM
    subscriptions
`

func (q *Queries) GetSubs(ctx context.Context) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, getSubs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.ServiceName,
			&i.Price,
			&i.UserID,
			&i.StartedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
