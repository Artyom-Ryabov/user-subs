// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: subscription_queries.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addSub = `-- name: AddSub :one
INSERT INTO subscriptions (
    service_name,
    price,
    user_id,
    started_at
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id
`

type AddSubParams struct {
	ServiceName string
	Price       int32
	UserID      uuid.UUID
	StartedAt   time.Time
}

func (q *Queries) AddSub(ctx context.Context, arg AddSubParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, addSub,
		arg.ServiceName,
		arg.Price,
		arg.UserID,
		arg.StartedAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteSub = `-- name: DeleteSub :one
DELETE FROM subscriptions WHERE id = $1 RETURNING id
`

func (q *Queries) DeleteSub(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, deleteSub, id)
	err := row.Scan(&id)
	return id, err
}

const deleteUserSubs = `-- name: DeleteUserSubs :many
DELETE FROM subscriptions WHERE user_id = $1 RETURNING id
`

func (q *Queries) DeleteUserSubs(ctx context.Context, userID uuid.UUID) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, deleteUserSubs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSub = `-- name: GetSub :one
SELECT id, service_name, price, user_id, started_at, created_at, updated_at FROM subscriptions WHERE id = $1
`

func (q *Queries) GetSub(ctx context.Context, id int32) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSub, id)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.ServiceName,
		&i.Price,
		&i.UserID,
		&i.StartedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSubs = `-- name: GetSubs :many
SELECT id, service_name, price, user_id, started_at, created_at, updated_at FROM subscriptions
`

func (q *Queries) GetSubs(ctx context.Context) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, getSubs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.ServiceName,
			&i.Price,
			&i.UserID,
			&i.StartedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSubs = `-- name: GetUserSubs :many
SELECT id, service_name, price, user_id, started_at, created_at, updated_at FROM subscriptions WHERE user_id = $1
`

func (q *Queries) GetUserSubs(ctx context.Context, userID uuid.UUID) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, getUserSubs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.ServiceName,
			&i.Price,
			&i.UserID,
			&i.StartedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSub = `-- name: UpdateSub :one
UPDATE subscriptions SET
    service_name = $1,
    price = $2,
    user_id = $3,
    started_at = $4,
    updated_at = $5
WHERE id = $6 RETURNING id
`

type UpdateSubParams struct {
	ServiceName string
	Price       int32
	UserID      uuid.UUID
	StartedAt   time.Time
	UpdatedAt   time.Time
	ID          int32
}

func (q *Queries) UpdateSub(ctx context.Context, arg UpdateSubParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, updateSub,
		arg.ServiceName,
		arg.Price,
		arg.UserID,
		arg.StartedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
